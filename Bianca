import react{useState, useEffect, useRef} from 'react';
import{view, text, styleSheet, touchableOpacty, alert} from 'react-native';
const Cell_size=20
const Grid_size:15;
const initial_snake=[{x:7,y:7}]
const initial_direction={x:o,y:-1}; //subindo
export default funcion snakeGame(){
const [snake, setSnake]=useState(initial_snake);
const [direction, setDirection]=useState(initial_diretion);
const[is gameOver, setIsGameOver]=useState(false);
const movieInterval=useRef(null);
funcionMovieSnake(){
setSnake(prev=>{
const newhead ={x:prev[0].x+direction.x, y:prev[0]. y+direction.y,
};
if(
newhead.x<0||newhead.x>=Grid_size||
newhead.y<0||newhead.y>=Grid_size||
prev.some(seguiment=> seguiment.x ===newhead.x&&sseguiment.y===newhead.y))}
setIsGameOver (true);
clearInterval(movieInterval.current);
alert.alert('fim de jogo','você bateu')
return prev; //Retorna o estado atual (sem alterar a cobrinha)
};
//criar uma nova array da cobrinha, com a nova cabeça na
const newSnake = [newHead, ...prev];
//Remove o último elemento, para ela só crescer comendo
newSnake.pop();
//Atualiza a cobrinha com a nova posição dela
return newSnake;
});
}
//Criar o loop do jogo principal
useEffect (() => {
moveIterval.current = setInterval(() => {
if(isGameOver) moveSnake(); // move a snake
},200//se move a cada 200ms
//limpar o intervalo se a direção mudar
return () => clearInterval(moveInterval.current);
}, [direction]);
const renderCell = (x,y) => {
//ver se a posição é a mesma cobrinha
const isSnake = snake.some(cell => cell.x === x && cell.y ===y)
return (
<View
key={'$(x)-$(y)'}
style={[styles.cell, isSnake && styles.snake]}
/>
);
};
st renderGrid = () =>{
let rows = [];
//variável condição encremento
for (let y =0;y < GRID_SIZE; y++){
let row = [];
for(let x; x <GRID_SIDE; x++){
row.push(renderCell(x,y));
}
row.push(<View key={y} style={style.row}</View)
}
return rows;
})
